local M = {}

M.get = function(c)
  return {
    --{{{ Base Highlight
    Comment                                      = { fg = c.fg_comment, italic = true, nocombine = true },
    Constant                                     = { fg = c.orange },
    Boolean                                      = { link = "Constant" },
    Character                                    = { link = "Constant" },
    Debug                                        = { fg = c.error },
    Delimiter                                    = { link = "Special" },
    Function                                     = { fg = c.blue, bold = true, nocombine = true },
    Identifier                                   = { fg = c.fg },
    Keyword                                      = { fg = c.magenta },
    Operator                                     = { fg = c.blue5 },
    PreProc                                      = { fg = c.cyan },
    Special                                      = { fg = c.blue1, nocombine = true },
    SpecialChar                                  = { link = "PreProc" },
    Statement                                    = { link = "PreProc" },
    String                                       = { fg = c.green },
    Structure                                    = { fg = c.purple },
    Type                                         = { fg = c.blue7 },
    Typedef                                      = { fg = c.purple },
    -- }}}
    -- {{{ Treesitter Highlight
    ["@annotation"]                              = { link = "PreProc" },
    ["@attribute"]                               = { link = "PreProc" },
    ["@boolean"]                                 = { link = "Constant" },
    ["@character"]                               = { link = "Constant" },
    ["@character.printf"]                        = { link = "SpecialChar" },
    ["@character.special"]                       = { link = "SpecialChar" },
    ["@comment"]                                 = { link = "Comment" },
    ["@comment.error"]                           = { fg = c.red },
    ["@comment.hint"]                            = { fg = c.teal },
    ["@comment.info"]                            = { fg = c.blue2 },
    ["@comment.note"]                            = { fg = c.teal },
    ["@comment.todo"]                            = { fg = c.blue },
    ["@comment.warning"]                         = { fg = c.yellow },
    ["@constant"]                                = { link = "Constant" },
    ["@constant.builtin"]                        = { link = "Special" },
    ["@constant.macro"]                          = { link = "PreProc" },
    ["@constructor"]                             = { fg = c.magenta, nocombine = true },
    ["@constructor.tsx"]                         = { fg = c.blue1 },
    ["@diff.delta"]                              = { link = "DiffChange" },
    ["@diff.minus"]                              = { link = "DiffDelete" },
    ["@diff.plus"]                               = { link = "DiffAdd" },
    ["@function"]                                = { link = "Function" },
    ["@function.call"]                           = { link = "Function" },
    ["@function.method"]                         = { link = "Function" },
    ["@function.method.call"]                    = { link = "Function" },
    ["@function.macro"]                          = { link = "PreProc" },
    ["@function.builtin"]                        = { link = "Special" },
    ["@keyword"]                                 = { link = "Keyword" },
    ["@keyword.conditional"]                     = { link = "Keyword" },
    ["@keyword.coroutine"]                       = { link = "@keyword" },
    ["@keyword.debug"]                           = { link = "Debug" },
    ["@keyword.directive"]                       = { link = "PreProc" },
    ["@keyword.exception"]                       = { link = "Exception" },
    ["@keyword.function"]                        = { link = "Structure" },
    ["@keyword.import"]                          = { link = "Include" },
    ["@keyword.operator"]                        = { link = "Operator" },
    ["@keyword.repeat"]                          = { link = "Repeat" },
    ["@keyword.return"]                          = { link = "Keyword" },
    ["@keyword.storage"]                         = { link = "StorageClass" },
    ["@label"]                                   = { link = "Function" },
    ["@markup"]                                  = { link = "@none" },
    ["@markup.emphasis"]                         = { italic = true },
    ["@markup.environment"]                      = { link = "Macro" },
    ["@markup.environment.name"]                 = { link = "Type" },
    ["@markup.heading"]                          = { link = "Title" },
    ["@markup.italic"]                           = { italic = true },
    ["@markup.link"]                             = { fg = c.teal },
    ["@markup.link.label"]                       = { link = "SpecialChar" },
    ["@markup.link.label.symbol"]                = { link = "Identifier" },
    ["@markup.link.url"]                         = { link = "Underlined" },
    ["@markup.list"]                             = { fg = c.blue5 },
    ["@markup.list.checked"]                     = { fg = c.teal },
    ["@markup.list.markdown"]                    = { fg = c.orange, bold = true },
    ["@markup.list.unchecked"]                   = { fg = c.blue },
    ["@markup.math"]                             = { link = "Special" },
    ["@markup.raw"]                              = { link = "Character" },
    ["@markup.raw.markdown_inline"]              = { fg = c.blue, bg = c.terminal_black },
    ["@markup.strikethrough"]                    = { strikethrough = true },
    ["@markup.strong"]                           = { bold = true },
    ["@markup.underline"]                        = { underline = true },
    ["@module"]                                  = { link = "Directory" },
    ["@module.cpp"]                              = { link = "PreProc" },
    ["@module.builtin"]                          = { link = "PreProc" },
    ["@namespace.builtin"]                       = { link = "PreProc" },
    ["@none"]                                    = {},
    ["@number"]                                  = { link = "Constant" },
    ["@number.float"]                            = { link = "Constant" },
    ["@operator"]                                = { link = "Operator" },
    ["@property"]                                = { fg = c.teal },
    ["@punctuation.bracket"]                     = { fg = c.fg_dark },
    ["@punctuation.delimiter"]                   = { fg = c.blue5 },
    ["@punctuation.special"]                     = { fg = c.blue5 },
    ["@punctuation.special.markdown"]            = { fg = c.orange },
    ["@string"]                                  = { link = "String" },
    ["@string.documentation"]                    = { fg = c.fg_comment },
    ["@string.escape"]                           = { link = "SpecialChar" },
    ["@string.regexp"]                           = { fg = c.blue6 },
    ["@tag"]                                     = { link = "Label" },
    ["@tag.attribute"]                           = { link = "@property" },
    ["@tag.delimiter"]                           = { link = "Delimiter" },
    ["@tag.delimiter.tsx"]                       = { fg = c.fg_delimiter },
    ["@tag.javascript"]                          = { fg = c.red },
    ["@tag.tsx"]                                 = { fg = c.red },
    ["@type"]                                    = { link = "Type" },
    ["@type.builtin"]                            = { link = "Special" },
    ["@type.definition"]                         = { link = "Typedef" },
    ["@type.qualifier"]                          = { link = "@keyword" },
    ["@variable"]                                = { link = "Identifier" },
    ["@variable.builtin"]                        = { link = "Keyword" },
    ["@variable.builtin.c"]                      = { link = "Function" },
    ["@variable.builtin.python"]                 = { fg = c.br_red, italic = true },
    ["@variable.member"]                         = { fg = c.teal },
    ["@variable.parameter"]                      = { fg = c.br_red },
    ["@variable.parameter.builtin"]              = { link = "variable.builtin.python" },
    -- }}}
    --{{{ Lsp Highlight
    ["@lsp.type.boolean"]                        = { link = "Boolean" },
    ["@lsp.type.builtinType"]                    = { link = "@type.builtin" },
    ["@lsp.type.class"]                          = { link = "Type" },
    ["@lsp.type.comment"]                        = { link = "Comment" },
    ["@lsp.type.decorator"]                      = { link = "@attribute" },
    ["@lsp.type.deriveHelper"]                   = { link = "@attribute" },
    ["@lsp.type.enum"]                           = { link = "Type" },
    ["@lsp.type.enumMember"]                     = { link = "Constant" },
    ["@lsp.type.escapeSequence"]                 = { link = "@string.escape" },
    ["@lsp.type.formatSpecifier"]                = { link = "@markup.list" },
    ["@lsp.type.generic"]                        = { link = "Type" },
    ["@lsp.type.interface"]                      = { link = "Type" },
    ["@lsp.type.keyword"]                        = { link = "Keyword" },
    ["@lsp.type.lifetime"]                       = { link = "StorageClass" },
    ["@lsp.type.method"]                         = {},
    ["@lsp.type.namespace"]                      = { link = "Directory" },
    ["@lsp.type.namespace.cpp"]                  = { link = "PreProc" },
    ["@lsp.type.namespace.python"]               = { link = "Identifier" },
    ["@lsp.type.number"]                         = { link = "Constant" },
    ["@lsp.type.operator"]                       = { link = "Operator" },
    ["@lsp.type.parameter"]                      = { link = "@variable.parameter" },
    ["@lsp.type.property"]                       = { link = "@property" },
    ["@lsp.type.selfKeyword"]                    = { link = "@variable.builtin.python" },
    ["@lsp.type.selfTypeKeyword"]                = { link = "@variable.builtin.python" },
    ["@lsp.type.string"]                         = { link = "String" },
    ["@lsp.type.typeAlias"]                      = { link = "Typedef" },
    ["@lsp.type.unresolvedReference"]            = { undercurl = true, sp = c.error },
    ["@lsp.type.variable"]                       = {},
    ["@lsp.typemod.class.defaultLibrary"]        = { link = "@type.builtin" },
    ["@lsp.typemod.enum.defaultLibrary"]         = { link = "@type.builtin" },
    ["@lsp.typemod.enumMember.defaultLibrary"]   = { link = "Special" },
    ["@lsp.typemod.function.defaultLibrary"]     = { link = "Special" },
    ["@lsp.typemod.function.defaultLibrary.cpp"] = { link = "@function.method" },
    ["@lsp.typemod.keyword.async"]               = { link = "@keyword.coroutine" },
    ["@lsp.typemod.keyword.injected"]            = { link = "@keyword" },
    ["@lsp.typemod.macro.defaultLibrary"]        = { link = "Special" },
    ["@lsp.typemod.method.defaultLibrary"]       = { link = "Special" },
    ["@lsp.typemod.operator.injected"]           = { link = "Operator" },
    ["@lsp.typemod.string.injected"]             = { link = "String" },
    ["@lsp.typemod.struct.defaultLibrary"]       = { link = "Special" },
    ["@lsp.typemod.type.defaultLibrary"]         = { link = "Special" },
    ["@lsp.typemod.typeAlias.defaultLibrary"]    = { link = "Special" },
    ["@lsp.typemod.variable.callable"]           = { link = "Function" },
    ["@lsp.typemod.variable.defaultLibrary"]     = { link = "@variable.builtin" },
    ["@lsp.typemod.variable.defaultLibrary.cpp"] = { link = "@variable.builtin.c" },
    ["@lsp.typemod.variable.injected"]           = { link = "Identifier" },
    ["@lsp.typemod.variable.static"]             = { link = "Constant" }, -- }}}
  }
end

return M
