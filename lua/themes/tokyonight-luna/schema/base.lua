local api = vim.api
local blend = require("themes.util").blend
local M = {}

M.get = function(c, t)
  local b = c.bg
  local f = c.fg
  local g = {
    Comment                     = { fg = c.comment, italic = true },
    ColorColumn                 = { bg = c.black },
    Conceal                     = { fg = c.dark5 },
    Cursor                      = { fg = c.bg, bg = c.fg },
    lCursor                     = { fg = c.bg, bg = c.fg },
    CursorIM                    = { fg = c.bg, bg = c.fg },
    CursorLine                  = { bg = c.bg_dark2 },
    CursorColumn                = { link = "CursorLine" },
    Directory                   = { fg = c.blue },
    DiffAdd                     = { bg = blend(c.green1, 0.15, b) },
    DiffChange                  = { bg = blend(c.blue7, 0.15, b) },
    DiffDelete                  = { bg = blend(c.red1, 0.15, b) },
    DiffText                    = { bg = c.blue7 },
    EndOfBuffer                 = { fg = c.bg },
    ErrorMsg                    = { fg = c.red },
    WinSeparator                = { fg = c.fg_gutter },
    Folded                      = { fg = c.blue, bg = c.fg_gutter },
    FoldColumn                  = { bg = t and c.none or c.bg, fg = c.comment },
    SignColumn                  = { bg = t and c.none or c.bg, fg = c.fg_gutter },
    SignColumnSB                = { bg = c.bg_dark, fg = c.fg_gutter },
    Substitute                  = { bg = c.red, fg = c.black },
    LineNr                      = { fg = c.fg_gutter },
    CursorLineNr                = { fg = c.orange, bold = true },
    LineNrAbove                 = { fg = c.fg_gutter },
    LineNrBelow                 = { fg = c.fg_gutter },
    MatchParen                  = { fg = c.orange, bold = true },
    ModeMsg                     = { fg = c.fg_dark, bold = true },
    MsgArea                     = { fg = c.fg_dark },
    MoreMsg                     = { fg = c.blue },
    NonText                     = { fg = c.dark3 },
    Normal                      = { fg = c.fg, bg = t and c.none or c.bg },
    NormalNC                    = { fg = c.fg, bg = t and c.none or c.bg },
    NormalSB                    = { fg = c.fg_dark, bg = c.bg_dark },
    NormalFloat                 = { fg = c.fg, bg = c.bg_dark },
    FloatBorder                 = { fg = c.border_highlight, bg = c.bg_dark },
    FloatTitle                  = { link = "FloatBorder" },
    Pmenu                       = { bg = c.bg_dark, fg = c.fg },
    PmenuMatch                  = { bg = c.bg_dark, fg = c.blue1 },
    PmenuSel                    = { bg = blend(c.fg_gutter, 0.8, b) },
    PmenuMatchSel               = { bg = blend(c.fg_gutter, 0.8, b), fg = c.blue1 },
    PmenuSbar                   = { bg = blend(c.bg_dark, 0.95, f) },
    PmenuThumb                  = { bg = c.fg_gutter },
    Question                    = { fg = c.blue },
    QuickFixLine                = { bg = c.bg_visual, bold = true },
    Search                      = { bg = c.blue0, fg = c.fg },
    IncSearch                   = { bg = c.orange, fg = c.black },
    CurSearch                   = { link = "IncSearch" },
    SpecialKey                  = { fg = c.dark3 },
    SpellBad                    = { sp = c.red, undercurl = true },
    SpellCap                    = { sp = c.yellow, undercurl = true },
    SpellLocal                  = { sp = c.blue2, undercurl = true },
    SpellRare                   = { sp = c.teal, undercurl = true },
    StatusLine                  = { fg = c.fg_dark, bg = c.dark },
    StatusLineNC                = { fg = c.fg_gutter, bg = c.dark },
    TabLine                     = { bg = c.dark, fg = c.fg_gutter },
    TabLineFill                 = { bg = c.black },
    TabLineSel                  = { fg = c.black, bg = c.blue },
    Title                       = { fg = c.blue, bold = true },
    Visual                      = { bg = c.bg_visual },
    VisualNOS                   = { bg = c.bg_visual },
    WarningMsg                  = { fg = c.yellow },
    Whitespace                  = { fg = c.fg_gutter },
    WildMenu                    = { bg = c.bg_visual },
    WinBar                      = { link = "StatusLine" },
    WinBarNC                    = { link = "StatusLineNC" },
    Bold                        = { bold = true, fg = c.fg },
    Character                   = { fg = c.green },
    Constant                    = { fg = c.orange },
    Debug                       = { fg = c.orange },
    Delimiter                   = { link = "Special" },
    Error                       = { fg = c.red },
    Function                    = { fg = c.blue },
    Identifier                  = { fg = c.magenta },
    Italic                      = { italic = true, fg = c.fg },
    Keyword                     = { fg = c.cyan },
    Operator                    = { fg = c.blue5 },
    PreProc                     = { fg = c.cyan },
    Special                     = { fg = c.blue1 },
    Statement                   = { fg = c.magenta },
    String                      = { fg = c.green },
    Todo                        = { bg = c.yellow, fg = c.bg },
    Type                        = { fg = c.blue1 },
    Underlined                  = { underline = true },
    LspReferenceText            = { bg = c.fg_gutter },
    LspReferenceRead            = { bg = c.fg_gutter },
    LspReferenceWrite           = { bg = c.fg_gutter },
    LspSignatureActiveParameter = { bg = blend(c.bg_visual, 0.4, b), bold = true },
    LspCodeLens                 = { fg = c.comment },
    LspInlayHint                = { bg = blend(c.blue7, 0.1, b), fg = c.dark3 },
    LspInfoBorder               = { fg = c.border_highlight, bg = c.bg_dark },
    DiagnosticError             = { fg = c.red },
    DiagnosticWarn              = { fg = c.yellow },
    DiagnosticInfo              = { fg = c.blue2 },
    DiagnosticHint              = { fg = c.teal },
    DiagnosticUnnecessary       = { fg = c.bg_dark3 },
    DiagnosticVirtualTextError  = { bg = blend(c.red, 0.1, b), fg = c.red },
    DiagnosticVirtualTextWarn   = { bg = blend(c.yellow, 0.1, b), fg = c.yellow },
    DiagnosticVirtualTextInfo   = { bg = blend(c.blue2, 0.1, b), fg = c.blue2 },
    DiagnosticVirtualTextHint   = { bg = blend(c.teal, 0.1, b), fg = c.teal },
    DiagnosticUnderlineError    = { undercurl = true, sp = c.red },
    DiagnosticUnderlineWarn     = { undercurl = true, sp = c.yellow },
    DiagnosticUnderlineInfo     = { undercurl = true, sp = c.blue2 },
    DiagnosticUnderlineHint     = { undercurl = true, sp = c.teal },
  }

  local hl = api.nvim_set_hl
  for k, v in pairs(g) do hl(0, k, v) end
end

return M
